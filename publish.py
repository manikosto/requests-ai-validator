#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–∞ –≤ PyPI
"""

import subprocess
import sys
from pathlib import Path


def run_command(cmd, description):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
    print(f"üîÑ {description}...")
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
    
    if result.returncode == 0:
        print(f"‚úÖ {description} - —É—Å–ø–µ—à–Ω–æ")
        if result.stdout:
            print(result.stdout)
    else:
        print(f"‚ùå {description} - –æ—à–∏–±–∫–∞")
        if result.stderr:
            print(result.stderr)
        return False
    
    return True


def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
    
    required_files = ["README.md", "LICENSE", "setup.py", "pyproject.toml"]
    missing_files = []
    
    for file in required_files:
        if not Path(file).exists():
            missing_files.append(file)
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        return False
    
    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
    return True


def build_package():
    """–°–±–æ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞"""
    if not run_command("python -m build", "–°–±–æ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞"):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    dist_dir = Path("dist")
    if not dist_dir.exists():
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è dist –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
        return False
    
    wheel_files = list(dist_dir.glob("*.whl"))
    tar_files = list(dist_dir.glob("*.tar.gz"))
    
    if not wheel_files or not tar_files:
        print("‚ùå –ù–µ –≤—Å–µ —Ñ–∞–π–ª—ã –¥–∏—Å—Ç—Ä–∏–±—É—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")
        return False
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ñ–∞–π–ª—ã:")
    for file in wheel_files + tar_files:
        print(f"  - {file.name}")
    
    return True


def test_package():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞...")
    
    test_script = '''
import requests_ai_validator
session = requests_ai_validator.AISession()
print("‚úÖ –ü–∞–∫–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
'''
    
    return run_command(f'python -c "{test_script}"', "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞")


def publish_to_test_pypi():
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Test PyPI"""
    print("üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Test PyPI...")
    
    cmd = "python -m twine upload --repository testpypi dist/*"
    print(f"–ö–æ–º–∞–Ω–¥–∞: {cmd}")
    print("–í–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–æ–≥–∏–Ω –¥–ª—è Test PyPI")
    
    result = subprocess.run(cmd, shell=True)
    return result.returncode == 0


def publish_to_pypi():
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ PyPI"""
    print("üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ PyPI...")
    
    confirm = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ PyPI? (yes/no): ")
    if confirm.lower() != "yes":
        print("‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return False
    
    cmd = "python -m twine upload dist/*"
    print(f"–ö–æ–º–∞–Ω–¥–∞: {cmd}")
    print("–í–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–æ–≥–∏–Ω –¥–ª—è PyPI")
    
    result = subprocess.run(cmd, shell=True)
    return result.returncode == 0


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üì¶ –ü—É–±–ª–∏–∫–∞—Ü–∏—è requests-ai-validator –≤ PyPI")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    try:
        import build
        import twine
    except ImportError:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")
        print("pip install build twine")
        return
    
    print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞–∫–µ—Ç")
    print("2. –°–æ–±—Ä–∞—Ç—å –ø–∞–∫–µ—Ç")
    print("3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞–∫–µ—Ç")
    print("4. –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ Test PyPI")
    print("5. –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ PyPI")
    print("6. –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª (1-4)")
    print("0. –í—ã—Ö–æ–¥")
    
    while True:
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (0-6): ").strip()
        
        if choice == "0":
            break
        elif choice == "1":
            check_requirements()
        elif choice == "2":
            if check_requirements():
                build_package()
        elif choice == "3":
            test_package()
        elif choice == "4":
            if Path("dist").exists():
                publish_to_test_pypi()
            else:
                print("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç (–æ–ø—Ü–∏—è 2)")
        elif choice == "5":
            if Path("dist").exists():
                publish_to_pypi()
            else:
                print("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç (–æ–ø—Ü–∏—è 2)")
        elif choice == "6":
            if (check_requirements() and 
                build_package() and 
                test_package()):
                print("\nüéØ –ì–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Test PyPI")
                if input("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ Test PyPI? (y/n): ").lower() == 'y':
                    publish_to_test_pypi()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


if __name__ == "__main__":
    main()
