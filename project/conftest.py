"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pytest –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
"""

import pytest
import os


@pytest.fixture(autouse=True, scope="session")
def configure_ai_for_tests():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ AI –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é session
    import requests_ai_validator as requests
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—É—é session –µ—Å–ª–∏ –µ—Å—Ç—å
    if hasattr(requests, '_global_session'):
        requests._global_session = None
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ –∏–∑ .env
    requests.configure_global_ai()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–∏–ª–æ—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    session = requests.get_global_session()
    if session.ai_provider:
        model = getattr(session.ai_provider, 'model', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')
        print(f"ü§ñ AI –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–æ–≤: {model}")
    
    yield
    
    # –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
    if hasattr(requests, '_global_session'):
        requests._global_session = None


@pytest.fixture(autouse=True)
def reset_ai_session():
    """–°–±—Ä–æ—Å AI session –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
    import requests_ai_validator as requests
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é session
    if hasattr(requests.functions, '_global_session'):
        requests.functions._global_session = None
    
    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º session —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    requests.configure_global_ai()
    
    yield
